### Configurations from config server
jwt-user:
  keys:
    access-token-key: '{"kty":"oct","k":"h4dfgRX5ZRZooHem3mEnctZ-KtR9FoESgCnH-3BNgde8"}'
#
redis-user:
  host: 192.168.0.125
  port: 6379
#
discovery-service-user:
  server:
    hostname: localhost
    port: 8010
  credentials:
    username: user
    password: pass
#
kafka-user:
  hostname: test

#
app:
  gateway:
    api-prefix: /api/v1
###


spring:
  application:
    name: api-gateway
  profiles:
    active: discovery-service-user, jwt-user, redis-user
  config:
    import: optional:configserver:http://${CONFIG_SERVER_USER}:${CONFIG_SERVER_PASSWORD}@${CONFIG_SERVER_HOST:localhost}:${CONFIG_SERVER_PORT:8012}

  data.redis:
    host: ${redis-user.host}
    port: ${redis-user.port}

  cloud:
    gateway:
      httpclient:
        connect-timeout: 1000
        response-timeout: 5s
      default-filters:
        - name: RequestRateLimiter
          args:
            rate-limiter: '#{@redisRateLimiter}'
            key-resolver: '#{@ipKeyResolver}'
        - RewritePath=${app.gateway.api-prefix}/?(?<segment>.*), /$\{segment}

      routes:
        ### Authentication and user routes
        - id: auth-service #login, refresh, logout
          uri: lb://authentication-ws
          predicates:
            - Path=${app.gateway.api-prefix}/auth/**

        - id: current-user #get current user
          uri: lb://user-profile-ws
          predicates:
            - Path=${app.gateway.api-prefix}/users/me
            - Method=GET
          filters:
            - JwtAuthorizationFilter

        - id: current-user-settings
          uri: lb://user-settings-ws
          predicates:
            - Path=${app.gateway.api-prefix}/users/me/settings
            - Method=GET
          filters:
            - JwtAuthorizationFilter

        ### Routes for managing user workspace
        - id: create-get-workspaces #get all users workspaces or POST new one
          uri: lb://workspace-manager-rs
          predicates:
            - Path=${app.gateway.api-prefix}/workspaces
            - Method=POST, GET
          filters:
            - JwtAuthorizationFilter

        - id: get-workspace-with-id #get workspace with specified id
          uri: lb://workspace-manager-rs
          predicates:
            - Path=${app.gateway.api-prefix}/workspaces/{workspaceId}
            - Method= GET
          filters:
            - JwtAuthorizationFilter

        ### Routes for managing user desks
        - id: create-get-desks #get all users desks in given workspace or get all desks in workspace
          uri: lb://desk-manager-rs
          predicates:
            - Path=${app.gateway.api-prefix}/workspaces/{workspaceId}/desks
            - Method=POST, GET
          filters:
            - JwtAuthorizationFilter

        - id: get-desks-with-id #get desk with specified id
          uri: lb://desk-manager-rs
          predicates:
            - Path=${app.gateway.api-prefix}/workspaces/{workspaceId}/desks/{deskId}
            - Method=GET
          filters:
            - JwtAuthorizationFilter

        ### Routes for managing user tasks
        - id: create-get-tasks
          uri: lb://task-manager-rs
          predicates:
            - Path=${app.gateway.api-prefix}/workspaces/{workspaceId}/desks/{deskId}/tasks
            - Method=POST, GET
          filters:
            - JwtAuthorizationFilter

        ### Routes for aggregation
        - id: get-workspaces-full #full information about workspace - with inner desks and tasks
          uri: lb://aggregator-rs
          predicates:
            - Path=${app.gateway.api-prefix}/workspaces/{workspaceId}/full
            - Method=GET
          filters:
            - JwtAuthorizationFilter


server.port: 8080

eureka:
  client:
    service-url:
      defaultZone: http://${discovery-service-user.server.hostname}:${discovery-service-user.server.port}/eureka
    register-with-eureka: false
  instance:
    prefer-ip-address: true
